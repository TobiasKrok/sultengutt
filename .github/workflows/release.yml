name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: windows
            goarch: amd64
            binary_name: sultengutt.exe
            artifact_name: sultengutt-windows-amd64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            binary_name: sultengutt
            artifact_name: sultengutt-darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            binary_name: sultengutt
            artifact_name: sultengutt-darwin-arm64

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      
      - name: Install dependencies for cross-compilation
        if: matrix.goos == 'windows' && runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64
      
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: ${{ matrix.goos == 'darwin' && '1' || '0' }}
        run: |
          go build -ldflags="-w -s" -o ${{ matrix.binary_name }} cmd/main.go
      
      - name: Create archive
        run: |
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip ${{ matrix.artifact_name }}.zip ${{ matrix.binary_name }}
          else
            tar czf ${{ matrix.artifact_name }}.tar.gz ${{ matrix.binary_name }}
          fi
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}.zip
            ${{ matrix.artifact_name }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Processing version: ${VERSION}"
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Prepare release assets
        run: |
          echo "Organizing release assets..."
          cd artifacts
          
          # Move all artifacts to root and generate checksums
          for dir in */; do
            echo "Processing directory: $dir"
            cd "$dir"
            for file in *; do
              if [ -f "$file" ]; then
                echo "Processing file: $file"
                sha256sum "$file" > "${file}.sha256"
                mv "$file" ../
                mv "${file}.sha256" ../
              fi
            done
            cd ..
            rmdir "$dir" 2>/dev/null || true
          done
          
          echo "Final artifacts:"
          ls -la
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## ðŸŽ‰ Sultengutt ${{ steps.get_version.outputs.version }}
            
            Cross-platform desktop reminder for ordering surprise dinners.
            
            ## ðŸ“¦ Installation
            
            ### Homebrew (macOS)
            ```bash
            brew tap tobiaskrok/sultengutt
            brew install sultengutt
            ```
            
            ### Scoop (Windows)
            ```bash
            scoop bucket add tobiaskrok https://github.com/TobiasKrok/scoop-bucket
            scoop install sultengutt
            ```
            
            ### Manual Installation
            Download the appropriate binary for your platform below, extract it, and place it in your PATH.
            
            ## ðŸš€ Getting Started
            
            After installation, run:
            ```bash
            sultengutt install
            ```
            
            ## ðŸ“‹ Available Commands
            
            - `sultengutt install` - Set up and configure Sultengutt
            - `sultengutt status` - Check current status and configuration
            - `sultengutt pause [duration]` - Pause reminders temporarily
            - `sultengutt resume` - Resume reminders
            - `sultengutt execute` - Manually trigger reminder popup
            - `sultengutt uninstall` - Remove Sultengutt completely
          files: ./artifacts/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Wait for release to be available
        run: |
          echo "Waiting 30 seconds for release to be fully available..."
          sleep 30
      
      - name: Trigger Homebrew Update
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          repository: TobiasKrok/homebrew-sultengutt
          event-type: update-formula
          client-payload: |
            {
              "version": "${{ needs.release.outputs.version }}"
            }
      
      - name: Log dispatch
        run: |
          echo "âœ… Dispatched update-formula event to homebrew-sultengutt"
          echo "Version: ${{ needs.release.outputs.version }}"

  update-scoop:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Wait for release to be available
        run: |
          echo "Waiting 30 seconds for release to be fully available..."
          sleep 30
      
      - name: Trigger Scoop Update
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          repository: TobiasKrok/scoop-bucket
          event-type: update-manifest
          client-payload: |
            {
              "version": "${{ needs.release.outputs.version }}"
            }
      
      - name: Log dispatch
        run: |
          echo "âœ… Dispatched update-manifest event to scoop-bucket"
          echo "Version: ${{ needs.release.outputs.version }}"